{"ast":null,"code":"import{frame,mixNumber,setDragLock,percent}from'motion-dom';import{invariant}from'motion-utils';import{animateMotionValue}from'../../animation/interfaces/motion-value.mjs';import{addDomEvent}from'../../events/add-dom-event.mjs';import{addPointerEvent}from'../../events/add-pointer-event.mjs';import{extractEventInfo}from'../../events/event-info.mjs';import{convertBoxToBoundingBox,convertBoundingBoxToBox}from'../../projection/geometry/conversion.mjs';import{calcLength}from'../../projection/geometry/delta-calc.mjs';import{createBox}from'../../projection/geometry/models.mjs';import{eachAxis}from'../../projection/utils/each-axis.mjs';import{measurePageBox}from'../../projection/utils/measure.mjs';import{getContextWindow}from'../../utils/get-context-window.mjs';import{isRefObject}from'../../utils/is-ref-object.mjs';import{addValueToWillChange}from'../../value/use-will-change/add-will-change.mjs';import{PanSession}from'../pan/PanSession.mjs';import{applyConstraints,calcRelativeConstraints,resolveDragElastic,rebaseAxisConstraints,calcViewportConstraints,calcOrigin,defaultElastic}from'./utils/constraints.mjs';const elementDragControls=new WeakMap();class VisualElementDragControls{constructor(visualElement){this.openDragLock=null;this.isDragging=false;this.currentDirection=null;this.originPoint={x:0,y:0};/**\n         * The permitted boundaries of travel, in pixels.\n         */this.constraints=false;this.hasMutatedConstraints=false;/**\n         * The per-axis resolved elastic values.\n         */this.elastic=createBox();/**\n         * The latest pointer event. Used as fallback when the `cancel` and `stop` functions are called without arguments.\n         */this.latestPointerEvent=null;/**\n         * The latest pan info. Used as fallback when the `cancel` and `stop` functions are called without arguments.\n         */this.latestPanInfo=null;this.visualElement=visualElement;}start(originEvent){let{snapToCursor=false,distanceThreshold}=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};/**\n         * Don't start dragging if this component is exiting\n         */const{presenceContext}=this.visualElement;if(presenceContext&&presenceContext.isPresent===false)return;const onSessionStart=event=>{const{dragSnapToOrigin}=this.getProps();// Stop or pause any animations on both axis values immediately. This allows the user to throw and catch\n// the component.\ndragSnapToOrigin?this.pauseAnimation():this.stopAnimation();if(snapToCursor){this.snapToCursor(extractEventInfo(event).point);}};const onStart=(event,info)=>{// Attempt to grab the global drag gesture lock - maybe make this part of PanSession\nconst{drag,dragPropagation,onDragStart}=this.getProps();if(drag&&!dragPropagation){if(this.openDragLock)this.openDragLock();this.openDragLock=setDragLock(drag);// If we don 't have the lock, don't start dragging\nif(!this.openDragLock)return;}this.latestPointerEvent=event;this.latestPanInfo=info;this.isDragging=true;this.currentDirection=null;this.resolveConstraints();if(this.visualElement.projection){this.visualElement.projection.isAnimationBlocked=true;this.visualElement.projection.target=undefined;}/**\n             * Record gesture origin\n             */eachAxis(axis=>{let current=this.getAxisMotionValue(axis).get()||0;/**\n                 * If the MotionValue is a percentage value convert to px\n                 */if(percent.test(current)){const{projection}=this.visualElement;if(projection&&projection.layout){const measuredAxis=projection.layout.layoutBox[axis];if(measuredAxis){const length=calcLength(measuredAxis);current=length*(parseFloat(current)/100);}}}this.originPoint[axis]=current;});// Fire onDragStart event\nif(onDragStart){frame.postRender(()=>onDragStart(event,info));}addValueToWillChange(this.visualElement,\"transform\");const{animationState}=this.visualElement;animationState&&animationState.setActive(\"whileDrag\",true);};const onMove=(event,info)=>{this.latestPointerEvent=event;this.latestPanInfo=info;const{dragPropagation,dragDirectionLock,onDirectionLock,onDrag}=this.getProps();// If we didn't successfully receive the gesture lock, early return.\nif(!dragPropagation&&!this.openDragLock)return;const{offset}=info;// Attempt to detect drag direction if directionLock is true\nif(dragDirectionLock&&this.currentDirection===null){this.currentDirection=getCurrentDirection(offset);// If we've successfully set a direction, notify listener\nif(this.currentDirection!==null){onDirectionLock&&onDirectionLock(this.currentDirection);}return;}// Update each point with the latest position\nthis.updateAxis(\"x\",info.point,offset);this.updateAxis(\"y\",info.point,offset);/**\n             * Ideally we would leave the renderer to fire naturally at the end of\n             * this frame but if the element is about to change layout as the result\n             * of a re-render we want to ensure the browser can read the latest\n             * bounding box to ensure the pointer and element don't fall out of sync.\n             */this.visualElement.render();/**\n             * This must fire after the render call as it might trigger a state\n             * change which itself might trigger a layout update.\n             */onDrag&&onDrag(event,info);};const onSessionEnd=(event,info)=>{this.latestPointerEvent=event;this.latestPanInfo=info;this.stop(event,info);this.latestPointerEvent=null;this.latestPanInfo=null;};const resumeAnimation=()=>eachAxis(axis=>{var _this$getAxisMotionVa;return this.getAnimationState(axis)===\"paused\"&&((_this$getAxisMotionVa=this.getAxisMotionValue(axis).animation)===null||_this$getAxisMotionVa===void 0?void 0:_this$getAxisMotionVa.play());});const{dragSnapToOrigin}=this.getProps();this.panSession=new PanSession(originEvent,{onSessionStart,onStart,onMove,onSessionEnd,resumeAnimation},{transformPagePoint:this.visualElement.getTransformPagePoint(),dragSnapToOrigin,distanceThreshold,contextWindow:getContextWindow(this.visualElement)});}/**\n     * @internal\n     */stop(event,panInfo){const finalEvent=event||this.latestPointerEvent;const finalPanInfo=panInfo||this.latestPanInfo;const isDragging=this.isDragging;this.cancel();if(!isDragging||!finalPanInfo||!finalEvent)return;const{velocity}=finalPanInfo;this.startAnimation(velocity);const{onDragEnd}=this.getProps();if(onDragEnd){frame.postRender(()=>onDragEnd(finalEvent,finalPanInfo));}}/**\n     * @internal\n     */cancel(){this.isDragging=false;const{projection,animationState}=this.visualElement;if(projection){projection.isAnimationBlocked=false;}this.panSession&&this.panSession.end();this.panSession=undefined;const{dragPropagation}=this.getProps();if(!dragPropagation&&this.openDragLock){this.openDragLock();this.openDragLock=null;}animationState&&animationState.setActive(\"whileDrag\",false);}updateAxis(axis,_point,offset){const{drag}=this.getProps();// If we're not dragging this axis, do an early return.\nif(!offset||!shouldDrag(axis,drag,this.currentDirection))return;const axisValue=this.getAxisMotionValue(axis);let next=this.originPoint[axis]+offset[axis];// Apply constraints\nif(this.constraints&&this.constraints[axis]){next=applyConstraints(next,this.constraints[axis],this.elastic[axis]);}axisValue.set(next);}resolveConstraints(){var _this$visualElement$p;const{dragConstraints,dragElastic}=this.getProps();const layout=this.visualElement.projection&&!this.visualElement.projection.layout?this.visualElement.projection.measure(false):(_this$visualElement$p=this.visualElement.projection)===null||_this$visualElement$p===void 0?void 0:_this$visualElement$p.layout;const prevConstraints=this.constraints;if(dragConstraints&&isRefObject(dragConstraints)){if(!this.constraints){this.constraints=this.resolveRefConstraints();}}else{if(dragConstraints&&layout){this.constraints=calcRelativeConstraints(layout.layoutBox,dragConstraints);}else{this.constraints=false;}}this.elastic=resolveDragElastic(dragElastic);/**\n         * If we're outputting to external MotionValues, we want to rebase the measured constraints\n         * from viewport-relative to component-relative.\n         */if(prevConstraints!==this.constraints&&layout&&this.constraints&&!this.hasMutatedConstraints){eachAxis(axis=>{if(this.constraints!==false&&this.getAxisMotionValue(axis)){this.constraints[axis]=rebaseAxisConstraints(layout.layoutBox[axis],this.constraints[axis]);}});}}resolveRefConstraints(){const{dragConstraints:constraints,onMeasureDragConstraints}=this.getProps();if(!constraints||!isRefObject(constraints))return false;const constraintsElement=constraints.current;invariant(constraintsElement!==null,\"If `dragConstraints` is set as a React ref, that ref must be passed to another component's `ref` prop.\",\"drag-constraints-ref\");const{projection}=this.visualElement;// TODO\nif(!projection||!projection.layout)return false;const constraintsBox=measurePageBox(constraintsElement,projection.root,this.visualElement.getTransformPagePoint());let measuredConstraints=calcViewportConstraints(projection.layout.layoutBox,constraintsBox);/**\n         * If there's an onMeasureDragConstraints listener we call it and\n         * if different constraints are returned, set constraints to that\n         */if(onMeasureDragConstraints){const userConstraints=onMeasureDragConstraints(convertBoxToBoundingBox(measuredConstraints));this.hasMutatedConstraints=!!userConstraints;if(userConstraints){measuredConstraints=convertBoundingBoxToBox(userConstraints);}}return measuredConstraints;}startAnimation(velocity){const{drag,dragMomentum,dragElastic,dragTransition,dragSnapToOrigin,onDragTransitionEnd}=this.getProps();const constraints=this.constraints||{};const momentumAnimations=eachAxis(axis=>{if(!shouldDrag(axis,drag,this.currentDirection)){return;}let transition=constraints&&constraints[axis]||{};if(dragSnapToOrigin)transition={min:0,max:0};/**\n             * Overdamp the boundary spring if `dragElastic` is disabled. There's still a frame\n             * of spring animations so we should look into adding a disable spring option to `inertia`.\n             * We could do something here where we affect the `bounceStiffness` and `bounceDamping`\n             * using the value of `dragElastic`.\n             */const bounceStiffness=dragElastic?200:1000000;const bounceDamping=dragElastic?40:10000000;const inertia={type:\"inertia\",velocity:dragMomentum?velocity[axis]:0,bounceStiffness,bounceDamping,timeConstant:750,restDelta:1,restSpeed:10,...dragTransition,...transition};// If we're not animating on an externally-provided `MotionValue` we can use the\n// component's animation controls which will handle interactions with whileHover (etc),\n// otherwise we just have to animate the `MotionValue` itself.\nreturn this.startAxisValueAnimation(axis,inertia);});// Run all animations and then resolve the new drag constraints.\nreturn Promise.all(momentumAnimations).then(onDragTransitionEnd);}startAxisValueAnimation(axis,transition){const axisValue=this.getAxisMotionValue(axis);addValueToWillChange(this.visualElement,axis);return axisValue.start(animateMotionValue(axis,axisValue,0,transition,this.visualElement,false));}stopAnimation(){eachAxis(axis=>this.getAxisMotionValue(axis).stop());}pauseAnimation(){eachAxis(axis=>{var _this$getAxisMotionVa2;return(_this$getAxisMotionVa2=this.getAxisMotionValue(axis).animation)===null||_this$getAxisMotionVa2===void 0?void 0:_this$getAxisMotionVa2.pause();});}getAnimationState(axis){var _this$getAxisMotionVa3;return(_this$getAxisMotionVa3=this.getAxisMotionValue(axis).animation)===null||_this$getAxisMotionVa3===void 0?void 0:_this$getAxisMotionVa3.state;}/**\n     * Drag works differently depending on which props are provided.\n     *\n     * - If _dragX and _dragY are provided, we output the gesture delta directly to those motion values.\n     * - Otherwise, we apply the delta to the x/y motion values.\n     */getAxisMotionValue(axis){const dragKey=`_drag${axis.toUpperCase()}`;const props=this.visualElement.getProps();const externalMotionValue=props[dragKey];return externalMotionValue?externalMotionValue:this.visualElement.getValue(axis,(props.initial?props.initial[axis]:undefined)||0);}snapToCursor(point){eachAxis(axis=>{const{drag}=this.getProps();// If we're not dragging this axis, do an early return.\nif(!shouldDrag(axis,drag,this.currentDirection))return;const{projection}=this.visualElement;const axisValue=this.getAxisMotionValue(axis);if(projection&&projection.layout){const{min,max}=projection.layout.layoutBox[axis];axisValue.set(point[axis]-mixNumber(min,max,0.5));}});}/**\n     * When the viewport resizes we want to check if the measured constraints\n     * have changed and, if so, reposition the element within those new constraints\n     * relative to where it was before the resize.\n     */scalePositionWithinConstraints(){if(!this.visualElement.current)return;const{drag,dragConstraints}=this.getProps();const{projection}=this.visualElement;if(!isRefObject(dragConstraints)||!projection||!this.constraints)return;/**\n         * Stop current animations as there can be visual glitching if we try to do\n         * this mid-animation\n         */this.stopAnimation();/**\n         * Record the relative position of the dragged element relative to the\n         * constraints box and save as a progress value.\n         */const boxProgress={x:0,y:0};eachAxis(axis=>{const axisValue=this.getAxisMotionValue(axis);if(axisValue&&this.constraints!==false){const latest=axisValue.get();boxProgress[axis]=calcOrigin({min:latest,max:latest},this.constraints[axis]);}});/**\n         * Update the layout of this element and resolve the latest drag constraints\n         */const{transformTemplate}=this.visualElement.getProps();this.visualElement.current.style.transform=transformTemplate?transformTemplate({},\"\"):\"none\";projection.root&&projection.root.updateScroll();projection.updateLayout();this.resolveConstraints();/**\n         * For each axis, calculate the current progress of the layout axis\n         * within the new constraints.\n         */eachAxis(axis=>{if(!shouldDrag(axis,drag,null))return;/**\n             * Calculate a new transform based on the previous box progress\n             */const axisValue=this.getAxisMotionValue(axis);const{min,max}=this.constraints[axis];axisValue.set(mixNumber(min,max,boxProgress[axis]));});}addListeners(){if(!this.visualElement.current)return;elementDragControls.set(this.visualElement,this);const element=this.visualElement.current;/**\n         * Attach a pointerdown event listener on this DOM element to initiate drag tracking.\n         */const stopPointerListener=addPointerEvent(element,\"pointerdown\",event=>{const{drag,dragListener=true}=this.getProps();drag&&dragListener&&this.start(event);});const measureDragConstraints=()=>{const{dragConstraints}=this.getProps();if(isRefObject(dragConstraints)&&dragConstraints.current){this.constraints=this.resolveRefConstraints();}};const{projection}=this.visualElement;const stopMeasureLayoutListener=projection.addEventListener(\"measure\",measureDragConstraints);if(projection&&!projection.layout){projection.root&&projection.root.updateScroll();projection.updateLayout();}frame.read(measureDragConstraints);/**\n         * Attach a window resize listener to scale the draggable target within its defined\n         * constraints as the window resizes.\n         */const stopResizeListener=addDomEvent(window,\"resize\",()=>this.scalePositionWithinConstraints());/**\n         * If the element's layout changes, calculate the delta and apply that to\n         * the drag gesture's origin point.\n         */const stopLayoutUpdateListener=projection.addEventListener(\"didUpdate\",_ref=>{let{delta,hasLayoutChanged}=_ref;if(this.isDragging&&hasLayoutChanged){eachAxis(axis=>{const motionValue=this.getAxisMotionValue(axis);if(!motionValue)return;this.originPoint[axis]+=delta[axis].translate;motionValue.set(motionValue.get()+delta[axis].translate);});this.visualElement.render();}});return()=>{stopResizeListener();stopPointerListener();stopMeasureLayoutListener();stopLayoutUpdateListener&&stopLayoutUpdateListener();};}getProps(){const props=this.visualElement.getProps();const{drag=false,dragDirectionLock=false,dragPropagation=false,dragConstraints=false,dragElastic=defaultElastic,dragMomentum=true}=props;return{...props,drag,dragDirectionLock,dragPropagation,dragConstraints,dragElastic,dragMomentum};}}function shouldDrag(direction,drag,currentDirection){return(drag===true||drag===direction)&&(currentDirection===null||currentDirection===direction);}/**\n * Based on an x/y offset determine the current drag direction. If both axis' offsets are lower\n * than the provided threshold, return `null`.\n *\n * @param offset - The x/y offset from origin.\n * @param lockThreshold - (Optional) - the minimum absolute offset before we can determine a drag direction.\n */function getCurrentDirection(offset){let lockThreshold=arguments.length>1&&arguments[1]!==undefined?arguments[1]:10;let direction=null;if(Math.abs(offset.y)>lockThreshold){direction=\"y\";}else if(Math.abs(offset.x)>lockThreshold){direction=\"x\";}return direction;}export{VisualElementDragControls,elementDragControls};","map":{"version":3,"names":["frame","mixNumber","setDragLock","percent","invariant","animateMotionValue","addDomEvent","addPointerEvent","extractEventInfo","convertBoxToBoundingBox","convertBoundingBoxToBox","calcLength","createBox","eachAxis","measurePageBox","getContextWindow","isRefObject","addValueToWillChange","PanSession","applyConstraints","calcRelativeConstraints","resolveDragElastic","rebaseAxisConstraints","calcViewportConstraints","calcOrigin","defaultElastic","elementDragControls","WeakMap","VisualElementDragControls","constructor","visualElement","openDragLock","isDragging","currentDirection","originPoint","x","y","constraints","hasMutatedConstraints","elastic","latestPointerEvent","latestPanInfo","start","originEvent","snapToCursor","distanceThreshold","arguments","length","undefined","presenceContext","isPresent","onSessionStart","event","dragSnapToOrigin","getProps","pauseAnimation","stopAnimation","point","onStart","info","drag","dragPropagation","onDragStart","resolveConstraints","projection","isAnimationBlocked","target","axis","current","getAxisMotionValue","get","test","layout","measuredAxis","layoutBox","parseFloat","postRender","animationState","setActive","onMove","dragDirectionLock","onDirectionLock","onDrag","offset","getCurrentDirection","updateAxis","render","onSessionEnd","stop","resumeAnimation","_this$getAxisMotionVa","getAnimationState","animation","play","panSession","transformPagePoint","getTransformPagePoint","contextWindow","panInfo","finalEvent","finalPanInfo","cancel","velocity","startAnimation","onDragEnd","end","_point","shouldDrag","axisValue","next","set","_this$visualElement$p","dragConstraints","dragElastic","measure","prevConstraints","resolveRefConstraints","onMeasureDragConstraints","constraintsElement","constraintsBox","root","measuredConstraints","userConstraints","dragMomentum","dragTransition","onDragTransitionEnd","momentumAnimations","transition","min","max","bounceStiffness","bounceDamping","inertia","type","timeConstant","restDelta","restSpeed","startAxisValueAnimation","Promise","all","then","_this$getAxisMotionVa2","pause","_this$getAxisMotionVa3","state","dragKey","toUpperCase","props","externalMotionValue","getValue","initial","scalePositionWithinConstraints","boxProgress","latest","transformTemplate","style","transform","updateScroll","updateLayout","addListeners","element","stopPointerListener","dragListener","measureDragConstraints","stopMeasureLayoutListener","addEventListener","read","stopResizeListener","window","stopLayoutUpdateListener","_ref","delta","hasLayoutChanged","motionValue","translate","direction","lockThreshold","Math","abs"],"sources":["C:/Users/oscar/Downloads/project (5)/src/node_modules/framer-motion/dist/es/gestures/drag/VisualElementDragControls.mjs"],"sourcesContent":["import { frame, mixNumber, setDragLock, percent } from 'motion-dom';\nimport { invariant } from 'motion-utils';\nimport { animateMotionValue } from '../../animation/interfaces/motion-value.mjs';\nimport { addDomEvent } from '../../events/add-dom-event.mjs';\nimport { addPointerEvent } from '../../events/add-pointer-event.mjs';\nimport { extractEventInfo } from '../../events/event-info.mjs';\nimport { convertBoxToBoundingBox, convertBoundingBoxToBox } from '../../projection/geometry/conversion.mjs';\nimport { calcLength } from '../../projection/geometry/delta-calc.mjs';\nimport { createBox } from '../../projection/geometry/models.mjs';\nimport { eachAxis } from '../../projection/utils/each-axis.mjs';\nimport { measurePageBox } from '../../projection/utils/measure.mjs';\nimport { getContextWindow } from '../../utils/get-context-window.mjs';\nimport { isRefObject } from '../../utils/is-ref-object.mjs';\nimport { addValueToWillChange } from '../../value/use-will-change/add-will-change.mjs';\nimport { PanSession } from '../pan/PanSession.mjs';\nimport { applyConstraints, calcRelativeConstraints, resolveDragElastic, rebaseAxisConstraints, calcViewportConstraints, calcOrigin, defaultElastic } from './utils/constraints.mjs';\n\nconst elementDragControls = new WeakMap();\nclass VisualElementDragControls {\n    constructor(visualElement) {\n        this.openDragLock = null;\n        this.isDragging = false;\n        this.currentDirection = null;\n        this.originPoint = { x: 0, y: 0 };\n        /**\n         * The permitted boundaries of travel, in pixels.\n         */\n        this.constraints = false;\n        this.hasMutatedConstraints = false;\n        /**\n         * The per-axis resolved elastic values.\n         */\n        this.elastic = createBox();\n        /**\n         * The latest pointer event. Used as fallback when the `cancel` and `stop` functions are called without arguments.\n         */\n        this.latestPointerEvent = null;\n        /**\n         * The latest pan info. Used as fallback when the `cancel` and `stop` functions are called without arguments.\n         */\n        this.latestPanInfo = null;\n        this.visualElement = visualElement;\n    }\n    start(originEvent, { snapToCursor = false, distanceThreshold } = {}) {\n        /**\n         * Don't start dragging if this component is exiting\n         */\n        const { presenceContext } = this.visualElement;\n        if (presenceContext && presenceContext.isPresent === false)\n            return;\n        const onSessionStart = (event) => {\n            const { dragSnapToOrigin } = this.getProps();\n            // Stop or pause any animations on both axis values immediately. This allows the user to throw and catch\n            // the component.\n            dragSnapToOrigin ? this.pauseAnimation() : this.stopAnimation();\n            if (snapToCursor) {\n                this.snapToCursor(extractEventInfo(event).point);\n            }\n        };\n        const onStart = (event, info) => {\n            // Attempt to grab the global drag gesture lock - maybe make this part of PanSession\n            const { drag, dragPropagation, onDragStart } = this.getProps();\n            if (drag && !dragPropagation) {\n                if (this.openDragLock)\n                    this.openDragLock();\n                this.openDragLock = setDragLock(drag);\n                // If we don 't have the lock, don't start dragging\n                if (!this.openDragLock)\n                    return;\n            }\n            this.latestPointerEvent = event;\n            this.latestPanInfo = info;\n            this.isDragging = true;\n            this.currentDirection = null;\n            this.resolveConstraints();\n            if (this.visualElement.projection) {\n                this.visualElement.projection.isAnimationBlocked = true;\n                this.visualElement.projection.target = undefined;\n            }\n            /**\n             * Record gesture origin\n             */\n            eachAxis((axis) => {\n                let current = this.getAxisMotionValue(axis).get() || 0;\n                /**\n                 * If the MotionValue is a percentage value convert to px\n                 */\n                if (percent.test(current)) {\n                    const { projection } = this.visualElement;\n                    if (projection && projection.layout) {\n                        const measuredAxis = projection.layout.layoutBox[axis];\n                        if (measuredAxis) {\n                            const length = calcLength(measuredAxis);\n                            current = length * (parseFloat(current) / 100);\n                        }\n                    }\n                }\n                this.originPoint[axis] = current;\n            });\n            // Fire onDragStart event\n            if (onDragStart) {\n                frame.postRender(() => onDragStart(event, info));\n            }\n            addValueToWillChange(this.visualElement, \"transform\");\n            const { animationState } = this.visualElement;\n            animationState && animationState.setActive(\"whileDrag\", true);\n        };\n        const onMove = (event, info) => {\n            this.latestPointerEvent = event;\n            this.latestPanInfo = info;\n            const { dragPropagation, dragDirectionLock, onDirectionLock, onDrag, } = this.getProps();\n            // If we didn't successfully receive the gesture lock, early return.\n            if (!dragPropagation && !this.openDragLock)\n                return;\n            const { offset } = info;\n            // Attempt to detect drag direction if directionLock is true\n            if (dragDirectionLock && this.currentDirection === null) {\n                this.currentDirection = getCurrentDirection(offset);\n                // If we've successfully set a direction, notify listener\n                if (this.currentDirection !== null) {\n                    onDirectionLock && onDirectionLock(this.currentDirection);\n                }\n                return;\n            }\n            // Update each point with the latest position\n            this.updateAxis(\"x\", info.point, offset);\n            this.updateAxis(\"y\", info.point, offset);\n            /**\n             * Ideally we would leave the renderer to fire naturally at the end of\n             * this frame but if the element is about to change layout as the result\n             * of a re-render we want to ensure the browser can read the latest\n             * bounding box to ensure the pointer and element don't fall out of sync.\n             */\n            this.visualElement.render();\n            /**\n             * This must fire after the render call as it might trigger a state\n             * change which itself might trigger a layout update.\n             */\n            onDrag && onDrag(event, info);\n        };\n        const onSessionEnd = (event, info) => {\n            this.latestPointerEvent = event;\n            this.latestPanInfo = info;\n            this.stop(event, info);\n            this.latestPointerEvent = null;\n            this.latestPanInfo = null;\n        };\n        const resumeAnimation = () => eachAxis((axis) => this.getAnimationState(axis) === \"paused\" &&\n            this.getAxisMotionValue(axis).animation?.play());\n        const { dragSnapToOrigin } = this.getProps();\n        this.panSession = new PanSession(originEvent, {\n            onSessionStart,\n            onStart,\n            onMove,\n            onSessionEnd,\n            resumeAnimation,\n        }, {\n            transformPagePoint: this.visualElement.getTransformPagePoint(),\n            dragSnapToOrigin,\n            distanceThreshold,\n            contextWindow: getContextWindow(this.visualElement),\n        });\n    }\n    /**\n     * @internal\n     */\n    stop(event, panInfo) {\n        const finalEvent = event || this.latestPointerEvent;\n        const finalPanInfo = panInfo || this.latestPanInfo;\n        const isDragging = this.isDragging;\n        this.cancel();\n        if (!isDragging || !finalPanInfo || !finalEvent)\n            return;\n        const { velocity } = finalPanInfo;\n        this.startAnimation(velocity);\n        const { onDragEnd } = this.getProps();\n        if (onDragEnd) {\n            frame.postRender(() => onDragEnd(finalEvent, finalPanInfo));\n        }\n    }\n    /**\n     * @internal\n     */\n    cancel() {\n        this.isDragging = false;\n        const { projection, animationState } = this.visualElement;\n        if (projection) {\n            projection.isAnimationBlocked = false;\n        }\n        this.panSession && this.panSession.end();\n        this.panSession = undefined;\n        const { dragPropagation } = this.getProps();\n        if (!dragPropagation && this.openDragLock) {\n            this.openDragLock();\n            this.openDragLock = null;\n        }\n        animationState && animationState.setActive(\"whileDrag\", false);\n    }\n    updateAxis(axis, _point, offset) {\n        const { drag } = this.getProps();\n        // If we're not dragging this axis, do an early return.\n        if (!offset || !shouldDrag(axis, drag, this.currentDirection))\n            return;\n        const axisValue = this.getAxisMotionValue(axis);\n        let next = this.originPoint[axis] + offset[axis];\n        // Apply constraints\n        if (this.constraints && this.constraints[axis]) {\n            next = applyConstraints(next, this.constraints[axis], this.elastic[axis]);\n        }\n        axisValue.set(next);\n    }\n    resolveConstraints() {\n        const { dragConstraints, dragElastic } = this.getProps();\n        const layout = this.visualElement.projection &&\n            !this.visualElement.projection.layout\n            ? this.visualElement.projection.measure(false)\n            : this.visualElement.projection?.layout;\n        const prevConstraints = this.constraints;\n        if (dragConstraints && isRefObject(dragConstraints)) {\n            if (!this.constraints) {\n                this.constraints = this.resolveRefConstraints();\n            }\n        }\n        else {\n            if (dragConstraints && layout) {\n                this.constraints = calcRelativeConstraints(layout.layoutBox, dragConstraints);\n            }\n            else {\n                this.constraints = false;\n            }\n        }\n        this.elastic = resolveDragElastic(dragElastic);\n        /**\n         * If we're outputting to external MotionValues, we want to rebase the measured constraints\n         * from viewport-relative to component-relative.\n         */\n        if (prevConstraints !== this.constraints &&\n            layout &&\n            this.constraints &&\n            !this.hasMutatedConstraints) {\n            eachAxis((axis) => {\n                if (this.constraints !== false &&\n                    this.getAxisMotionValue(axis)) {\n                    this.constraints[axis] = rebaseAxisConstraints(layout.layoutBox[axis], this.constraints[axis]);\n                }\n            });\n        }\n    }\n    resolveRefConstraints() {\n        const { dragConstraints: constraints, onMeasureDragConstraints } = this.getProps();\n        if (!constraints || !isRefObject(constraints))\n            return false;\n        const constraintsElement = constraints.current;\n        invariant(constraintsElement !== null, \"If `dragConstraints` is set as a React ref, that ref must be passed to another component's `ref` prop.\", \"drag-constraints-ref\");\n        const { projection } = this.visualElement;\n        // TODO\n        if (!projection || !projection.layout)\n            return false;\n        const constraintsBox = measurePageBox(constraintsElement, projection.root, this.visualElement.getTransformPagePoint());\n        let measuredConstraints = calcViewportConstraints(projection.layout.layoutBox, constraintsBox);\n        /**\n         * If there's an onMeasureDragConstraints listener we call it and\n         * if different constraints are returned, set constraints to that\n         */\n        if (onMeasureDragConstraints) {\n            const userConstraints = onMeasureDragConstraints(convertBoxToBoundingBox(measuredConstraints));\n            this.hasMutatedConstraints = !!userConstraints;\n            if (userConstraints) {\n                measuredConstraints = convertBoundingBoxToBox(userConstraints);\n            }\n        }\n        return measuredConstraints;\n    }\n    startAnimation(velocity) {\n        const { drag, dragMomentum, dragElastic, dragTransition, dragSnapToOrigin, onDragTransitionEnd, } = this.getProps();\n        const constraints = this.constraints || {};\n        const momentumAnimations = eachAxis((axis) => {\n            if (!shouldDrag(axis, drag, this.currentDirection)) {\n                return;\n            }\n            let transition = (constraints && constraints[axis]) || {};\n            if (dragSnapToOrigin)\n                transition = { min: 0, max: 0 };\n            /**\n             * Overdamp the boundary spring if `dragElastic` is disabled. There's still a frame\n             * of spring animations so we should look into adding a disable spring option to `inertia`.\n             * We could do something here where we affect the `bounceStiffness` and `bounceDamping`\n             * using the value of `dragElastic`.\n             */\n            const bounceStiffness = dragElastic ? 200 : 1000000;\n            const bounceDamping = dragElastic ? 40 : 10000000;\n            const inertia = {\n                type: \"inertia\",\n                velocity: dragMomentum ? velocity[axis] : 0,\n                bounceStiffness,\n                bounceDamping,\n                timeConstant: 750,\n                restDelta: 1,\n                restSpeed: 10,\n                ...dragTransition,\n                ...transition,\n            };\n            // If we're not animating on an externally-provided `MotionValue` we can use the\n            // component's animation controls which will handle interactions with whileHover (etc),\n            // otherwise we just have to animate the `MotionValue` itself.\n            return this.startAxisValueAnimation(axis, inertia);\n        });\n        // Run all animations and then resolve the new drag constraints.\n        return Promise.all(momentumAnimations).then(onDragTransitionEnd);\n    }\n    startAxisValueAnimation(axis, transition) {\n        const axisValue = this.getAxisMotionValue(axis);\n        addValueToWillChange(this.visualElement, axis);\n        return axisValue.start(animateMotionValue(axis, axisValue, 0, transition, this.visualElement, false));\n    }\n    stopAnimation() {\n        eachAxis((axis) => this.getAxisMotionValue(axis).stop());\n    }\n    pauseAnimation() {\n        eachAxis((axis) => this.getAxisMotionValue(axis).animation?.pause());\n    }\n    getAnimationState(axis) {\n        return this.getAxisMotionValue(axis).animation?.state;\n    }\n    /**\n     * Drag works differently depending on which props are provided.\n     *\n     * - If _dragX and _dragY are provided, we output the gesture delta directly to those motion values.\n     * - Otherwise, we apply the delta to the x/y motion values.\n     */\n    getAxisMotionValue(axis) {\n        const dragKey = `_drag${axis.toUpperCase()}`;\n        const props = this.visualElement.getProps();\n        const externalMotionValue = props[dragKey];\n        return externalMotionValue\n            ? externalMotionValue\n            : this.visualElement.getValue(axis, (props.initial\n                ? props.initial[axis]\n                : undefined) || 0);\n    }\n    snapToCursor(point) {\n        eachAxis((axis) => {\n            const { drag } = this.getProps();\n            // If we're not dragging this axis, do an early return.\n            if (!shouldDrag(axis, drag, this.currentDirection))\n                return;\n            const { projection } = this.visualElement;\n            const axisValue = this.getAxisMotionValue(axis);\n            if (projection && projection.layout) {\n                const { min, max } = projection.layout.layoutBox[axis];\n                axisValue.set(point[axis] - mixNumber(min, max, 0.5));\n            }\n        });\n    }\n    /**\n     * When the viewport resizes we want to check if the measured constraints\n     * have changed and, if so, reposition the element within those new constraints\n     * relative to where it was before the resize.\n     */\n    scalePositionWithinConstraints() {\n        if (!this.visualElement.current)\n            return;\n        const { drag, dragConstraints } = this.getProps();\n        const { projection } = this.visualElement;\n        if (!isRefObject(dragConstraints) || !projection || !this.constraints)\n            return;\n        /**\n         * Stop current animations as there can be visual glitching if we try to do\n         * this mid-animation\n         */\n        this.stopAnimation();\n        /**\n         * Record the relative position of the dragged element relative to the\n         * constraints box and save as a progress value.\n         */\n        const boxProgress = { x: 0, y: 0 };\n        eachAxis((axis) => {\n            const axisValue = this.getAxisMotionValue(axis);\n            if (axisValue && this.constraints !== false) {\n                const latest = axisValue.get();\n                boxProgress[axis] = calcOrigin({ min: latest, max: latest }, this.constraints[axis]);\n            }\n        });\n        /**\n         * Update the layout of this element and resolve the latest drag constraints\n         */\n        const { transformTemplate } = this.visualElement.getProps();\n        this.visualElement.current.style.transform = transformTemplate\n            ? transformTemplate({}, \"\")\n            : \"none\";\n        projection.root && projection.root.updateScroll();\n        projection.updateLayout();\n        this.resolveConstraints();\n        /**\n         * For each axis, calculate the current progress of the layout axis\n         * within the new constraints.\n         */\n        eachAxis((axis) => {\n            if (!shouldDrag(axis, drag, null))\n                return;\n            /**\n             * Calculate a new transform based on the previous box progress\n             */\n            const axisValue = this.getAxisMotionValue(axis);\n            const { min, max } = this.constraints[axis];\n            axisValue.set(mixNumber(min, max, boxProgress[axis]));\n        });\n    }\n    addListeners() {\n        if (!this.visualElement.current)\n            return;\n        elementDragControls.set(this.visualElement, this);\n        const element = this.visualElement.current;\n        /**\n         * Attach a pointerdown event listener on this DOM element to initiate drag tracking.\n         */\n        const stopPointerListener = addPointerEvent(element, \"pointerdown\", (event) => {\n            const { drag, dragListener = true } = this.getProps();\n            drag && dragListener && this.start(event);\n        });\n        const measureDragConstraints = () => {\n            const { dragConstraints } = this.getProps();\n            if (isRefObject(dragConstraints) && dragConstraints.current) {\n                this.constraints = this.resolveRefConstraints();\n            }\n        };\n        const { projection } = this.visualElement;\n        const stopMeasureLayoutListener = projection.addEventListener(\"measure\", measureDragConstraints);\n        if (projection && !projection.layout) {\n            projection.root && projection.root.updateScroll();\n            projection.updateLayout();\n        }\n        frame.read(measureDragConstraints);\n        /**\n         * Attach a window resize listener to scale the draggable target within its defined\n         * constraints as the window resizes.\n         */\n        const stopResizeListener = addDomEvent(window, \"resize\", () => this.scalePositionWithinConstraints());\n        /**\n         * If the element's layout changes, calculate the delta and apply that to\n         * the drag gesture's origin point.\n         */\n        const stopLayoutUpdateListener = projection.addEventListener(\"didUpdate\", (({ delta, hasLayoutChanged }) => {\n            if (this.isDragging && hasLayoutChanged) {\n                eachAxis((axis) => {\n                    const motionValue = this.getAxisMotionValue(axis);\n                    if (!motionValue)\n                        return;\n                    this.originPoint[axis] += delta[axis].translate;\n                    motionValue.set(motionValue.get() + delta[axis].translate);\n                });\n                this.visualElement.render();\n            }\n        }));\n        return () => {\n            stopResizeListener();\n            stopPointerListener();\n            stopMeasureLayoutListener();\n            stopLayoutUpdateListener && stopLayoutUpdateListener();\n        };\n    }\n    getProps() {\n        const props = this.visualElement.getProps();\n        const { drag = false, dragDirectionLock = false, dragPropagation = false, dragConstraints = false, dragElastic = defaultElastic, dragMomentum = true, } = props;\n        return {\n            ...props,\n            drag,\n            dragDirectionLock,\n            dragPropagation,\n            dragConstraints,\n            dragElastic,\n            dragMomentum,\n        };\n    }\n}\nfunction shouldDrag(direction, drag, currentDirection) {\n    return ((drag === true || drag === direction) &&\n        (currentDirection === null || currentDirection === direction));\n}\n/**\n * Based on an x/y offset determine the current drag direction. If both axis' offsets are lower\n * than the provided threshold, return `null`.\n *\n * @param offset - The x/y offset from origin.\n * @param lockThreshold - (Optional) - the minimum absolute offset before we can determine a drag direction.\n */\nfunction getCurrentDirection(offset, lockThreshold = 10) {\n    let direction = null;\n    if (Math.abs(offset.y) > lockThreshold) {\n        direction = \"y\";\n    }\n    else if (Math.abs(offset.x) > lockThreshold) {\n        direction = \"x\";\n    }\n    return direction;\n}\n\nexport { VisualElementDragControls, elementDragControls };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}