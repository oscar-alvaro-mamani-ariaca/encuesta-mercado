{"ast":null,"code":"import{isMotionValue}from'motion-dom';import{Fragment,useMemo,createElement}from'react';import{useHTMLProps}from'../html/use-props.mjs';import{useSVGProps}from'../svg/use-props.mjs';import{filterProps}from'./utils/filter-props.mjs';import{isSVGComponent}from'./utils/is-svg-component.mjs';function useRender(Component,props,ref,_ref,isStatic){let{latestValues}=_ref;let forwardMotionProps=arguments.length>5&&arguments[5]!==undefined?arguments[5]:false;const useVisualProps=isSVGComponent(Component)?useSVGProps:useHTMLProps;const visualProps=useVisualProps(props,latestValues,isStatic,Component);const filteredProps=filterProps(props,typeof Component===\"string\",forwardMotionProps);const elementProps=Component!==Fragment?{...filteredProps,...visualProps,ref}:{};/**\n     * If component has been handed a motion value as its child,\n     * memoise its initial value and render that. Subsequent updates\n     * will be handled by the onChange handler\n     */const{children}=props;const renderedChildren=useMemo(()=>isMotionValue(children)?children.get():children,[children]);return/*#__PURE__*/createElement(Component,{...elementProps,children:renderedChildren});}export{useRender};","map":{"version":3,"names":["isMotionValue","Fragment","useMemo","createElement","useHTMLProps","useSVGProps","filterProps","isSVGComponent","useRender","Component","props","ref","_ref","isStatic","latestValues","forwardMotionProps","arguments","length","undefined","useVisualProps","visualProps","filteredProps","elementProps","children","renderedChildren","get"],"sources":["C:/Users/oscar/Downloads/project (5)/src/node_modules/framer-motion/dist/es/render/dom/use-render.mjs"],"sourcesContent":["import { isMotionValue } from 'motion-dom';\nimport { Fragment, useMemo, createElement } from 'react';\nimport { useHTMLProps } from '../html/use-props.mjs';\nimport { useSVGProps } from '../svg/use-props.mjs';\nimport { filterProps } from './utils/filter-props.mjs';\nimport { isSVGComponent } from './utils/is-svg-component.mjs';\n\nfunction useRender(Component, props, ref, { latestValues, }, isStatic, forwardMotionProps = false) {\n    const useVisualProps = isSVGComponent(Component)\n        ? useSVGProps\n        : useHTMLProps;\n    const visualProps = useVisualProps(props, latestValues, isStatic, Component);\n    const filteredProps = filterProps(props, typeof Component === \"string\", forwardMotionProps);\n    const elementProps = Component !== Fragment ? { ...filteredProps, ...visualProps, ref } : {};\n    /**\n     * If component has been handed a motion value as its child,\n     * memoise its initial value and render that. Subsequent updates\n     * will be handled by the onChange handler\n     */\n    const { children } = props;\n    const renderedChildren = useMemo(() => (isMotionValue(children) ? children.get() : children), [children]);\n    return createElement(Component, {\n        ...elementProps,\n        children: renderedChildren,\n    });\n}\n\nexport { useRender };\n"],"mappings":"AAAA,OAASA,aAAa,KAAQ,YAAY,CAC1C,OAASC,QAAQ,CAAEC,OAAO,CAAEC,aAAa,KAAQ,OAAO,CACxD,OAASC,YAAY,KAAQ,uBAAuB,CACpD,OAASC,WAAW,KAAQ,sBAAsB,CAClD,OAASC,WAAW,KAAQ,0BAA0B,CACtD,OAASC,cAAc,KAAQ,8BAA8B,CAE7D,QAAS,CAAAC,SAASA,CAACC,SAAS,CAAEC,KAAK,CAAEC,GAAG,CAAAC,IAAA,CAAqBC,QAAQ,CAA8B,IAAzD,CAAEC,YAAc,CAAC,CAAAF,IAAA,IAAY,CAAAG,kBAAkB,CAAAC,SAAA,CAAAC,MAAA,IAAAD,SAAA,MAAAE,SAAA,CAAAF,SAAA,IAAG,KAAK,CAC7F,KAAM,CAAAG,cAAc,CAAGZ,cAAc,CAACE,SAAS,CAAC,CAC1CJ,WAAW,CACXD,YAAY,CAClB,KAAM,CAAAgB,WAAW,CAAGD,cAAc,CAACT,KAAK,CAAEI,YAAY,CAAED,QAAQ,CAAEJ,SAAS,CAAC,CAC5E,KAAM,CAAAY,aAAa,CAAGf,WAAW,CAACI,KAAK,CAAE,MAAO,CAAAD,SAAS,GAAK,QAAQ,CAAEM,kBAAkB,CAAC,CAC3F,KAAM,CAAAO,YAAY,CAAGb,SAAS,GAAKR,QAAQ,CAAG,CAAE,GAAGoB,aAAa,CAAE,GAAGD,WAAW,CAAET,GAAI,CAAC,CAAG,CAAC,CAAC,CAC5F;AACJ;AACA;AACA;AACA,OACI,KAAM,CAAEY,QAAS,CAAC,CAAGb,KAAK,CAC1B,KAAM,CAAAc,gBAAgB,CAAGtB,OAAO,CAAC,IAAOF,aAAa,CAACuB,QAAQ,CAAC,CAAGA,QAAQ,CAACE,GAAG,CAAC,CAAC,CAAGF,QAAS,CAAE,CAACA,QAAQ,CAAC,CAAC,CACzG,mBAAOpB,aAAa,CAACM,SAAS,CAAE,CAC5B,GAAGa,YAAY,CACfC,QAAQ,CAAEC,gBACd,CAAC,CAAC,CACN,CAEA,OAAShB,SAAS","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}